buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.akhikhl.gretty:gretty:1.2.4"
    }
}

apply plugin: 'war'

apply plugin: 'netflix.ospackage-tomcat'

apply plugin: "org.akhikhl.gretty"

repositories {
    jcenter()
}

// Gretty allows us to run tomcat from the command line using the "tomcatRun" task.
Properties development_properties = new Properties()
development_properties.load(new FileInputStream(file("src/main/resources/laptop.properties")))
gretty {
    contextPath = '/'
    servletContainer = 'tomcat8'
    systemProperties = development_properties
    scanDirs = ['**/src/main/webapp/**']
    scanDependencies = true
    // More properties can be found here:
    // http://akhikhl.github.io/gretty-doc/Gretty-configuration.html
}

// The ezconfig configuration kicks in when we build our debian package and deploy in AWS.
// It contains all the OS env variable configurations and anything else that tunes our boxes and
// tomcat server.
ospackage {
    packageName = 'vmstransformer'
    requires('nflx-ezconfig')
    requires('nflx-base-www')
}

dependencies {
    // Governator wires up all of our dependencies in dependency injection fashion.
    compile 'com.netflix.governator:governator-core:1.15.10'
    compile 'com.netflix.governator:governator-servlet:1.15.10'
    compile 'com.netflix.governator:governator-jersey:1.15.10'
    // We don't want this to be packaged with the rest. It's only for local runs of our main().
    provided ("com.netflix.governator:governator-jetty:1.12.15") { transitive=false }
    // Same for the servlet libs.
    provided "org.eclipse.jetty:jetty-servlet:9.2.15.v20160210"
    provided 'javax.servlet:javax.servlet-api:3.1.0'
    
    compile "netflix:nf-eventbus-guice:latest.release"
    compile "netflix:nf-eventbus:latest.release"
    compile "netflix:nf-eventbus-core:latest.release"

    // Runtime lifecycle modules bring in all the essential Netflix platform dependencies.
    compile "com.netflix.runtime:runtime-lifecycle:latest.release"

    // Cassandra Aeneas driver
    compile "com.netflix.aeneas:aeneas-core:latest.release"

    // VMS Transformer
    compile project(':vmstransformer-common-interfaces')
    compile project(':vmstransformer-io')
    compile project(':vmstransformer-business-logic')
    compile project(':vmstransformer-publish-workflow')
    compile 'com.netflix.vms.logging:vmslogging-slf4j:latest.release'
    compile 'netflix:vms-hollow-generated-notemplate:56.1075'
    
    // httpclient
    compile 'org.apache.httpcomponents:httpclient:4.3.4'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.3'
    testCompile 'org.assertj:assertj-core:3.3.0'
    testCompile 'com.netflix.hollow:hollow-diff-ui:2.+'

    // Cassandra Aeneas unit test kit.
    testCompile "com.netflix.aeneas:aeneas-test:latest.release"

    testCompile 'com.netflix.hollow:hollow-diff-ui:2.+'
    testCompile 'org.eclipse.jetty:jetty-server:9.4.2.v20170220'
}

facets {
    tools {
        parentSourceSet = 'test'
    }
}

// Required exclusions to work around a bug in gretty: log4j-over-slf4j is accidentally included
configurations.grettyRunnerTomcat7 {
    exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}
configurations.grettyRunnerTomcat8 {
    exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
}

war {
  into('WEB-INF/classes') {
    from 'src/main/java'
  }
}
