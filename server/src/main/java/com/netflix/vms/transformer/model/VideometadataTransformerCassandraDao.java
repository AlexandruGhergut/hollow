package com.netflix.vms.transformer.model;

import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Named;
import java.util.List;
import java.util.Optional;

/**
 * This DAO uses the Datastax prepared statement API. The reason is two-fold: (a) it's safer against
 * CQL injection attacks since we don't let free form CQL go down to Cassandra, and (b) because
 * Cassandra stores prepared statements in a compiled form on the server it executes them faster.
 *
 * There is however an alternative Query Builder API if you so choose which is equally safe and
 * potentially more elegant, but it's not as performant as prepared statements:
 * https://docs.datastax.com/en/developer/java-driver/2.0/java-driver/reference/queryBuilder_r.html
 *
 * @author This file is auto-generated by runtime@netflix.com. Feel free to modify.
 */
public final class VideometadataTransformerCassandraDao implements VideometadataTransformerDao {
    private static final Logger logger = LoggerFactory.getLogger(VideometadataTransformerCassandraDao.class);

    private static final String FULL_TABLE_NAME = "vmstransformer.greetings";
    private static final String EMAIL_COL_KEY = "userEmail";
    private static final String FIRSTNAME_COL_KEY = "firstName";
    private static final String MESSAGE_COL_KEY = "message";
    private static final String CREATE_STATEMENT = "CREATE TABLE IF NOT EXISTS %s " +
            "(userEmail TEXT, firstName TEXT, message TEXT, PRIMARY KEY (userEmail));";
    private static final String SELECT_STATEMENT = "SELECT * FROM %s WHERE userEmail=?";
    private static final String UPDATE_STATEMENT = "UPDATE %s SET firstName=?, message=? " +
            "WHERE userEmail=?";

    private final Session session;
    private final PreparedStatement selectStatement;
    private final PreparedStatement updateStatement;

    @Inject
    public VideometadataTransformerCassandraDao(@Named("greetings") Session session) {
        // The constructor sets up any state we need for our DAO and Guice guarantees we get any
        // issues bubble up during service init time.
        this.session = session;
        session.execute(String.format(CREATE_STATEMENT, FULL_TABLE_NAME));
        this.selectStatement = session.prepare(String.format(SELECT_STATEMENT, FULL_TABLE_NAME));
        this.updateStatement = session.prepare(String.format(UPDATE_STATEMENT, FULL_TABLE_NAME));
        logger.debug("Cassandra DAO Initialized.");
    }

    @Override
    public Optional<Greeting> loadGreeting(String userEmail) {
        ResultSet results = session.execute(selectStatement.bind(userEmail));
        List<Row> allRows = results.all();
        return Optional.of(allRows).filter((rows) -> rows.size() > 0).map((rows) -> {
            Row row = rows.get(0);
            Greeting greeting = new Greeting();
            greeting.setUserEmail(row.getString(EMAIL_COL_KEY));
            greeting.setFirstName(row.getString(FIRSTNAME_COL_KEY));
            greeting.setMessage(row.getString(MESSAGE_COL_KEY));
            return greeting;
        });
    }

    @Override
    public void storeGreeting(Greeting greeting) {
        session.execute(updateStatement.bind(greeting.getFirstName(), greeting.getMessage(),
                                             greeting.getUserEmail()));
    }
}
