package com.netflix.sunjeetsonboardingroot.startup;

import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.Session;
import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.netflix.aeneas.NfAeneasManager;
import com.netflix.aeneas.connectionpool.exceptions.ConnectionException;

import javax.inject.Named;
import javax.inject.Singleton;

/**
 * The Cassandra module wires up Cassandra Datastax driver abstractions needed for our DAOs.
 *
 * If you walk backwards you will see that our DAOs need a Session to talk to Cassandra.
 *
 * The Session is generated by a Cluster. You can have multiple Sessions per Cluster but we recommend one per Cluster
 * since each Session has a thread-pool to handle requests so there is no reason to have multiple thread pools talking
 * to the same Cluster.
 *
 * A Cluster is backed by a physical Cassandra cluster.
 *
 * This module has a single Cluster but you can extend your
 * service to talk to multiple Clusters. You can do that by providing additional Clusters like so:
 *
 * <pre>
 * <code>
 *
 *   {@literal @}Provides
 *   {@literal @}Singleton
 *   {@literal @}Named("anotherSchema")
 *    public Cluster getAnotherCluster(NfAeneasManager aeneasManager) throws ConnectionException {
 *        return aeneasManager.registerCluster("cass_other");
 *    }
 * </code>
 * </pre>
 *
 * Once you add the new Cluster you can get Sessions from it the same way as shown in this module.
 *
 * The client used to talk to Cassandra is called Aeneas. For in-depth information please visit http://go/aeneas.
 *
 * NOTE: When you are ready to move to production you are expected to deploy a dedicated cluster for your service.
 * 'cass_sandbox' will not be available in prod.
 * It is recommended that you have the same name cluster both in test and prod.
 *
 * Please contact cde@netflix.com for recommendations on how to set this up.
 *
 * @author This file is auto-generated by runtime@netflix.com. Feel free to modify.
 */
public final class CassandraModule extends AbstractModule {
    @Override
    protected void configure() {
        //No-op
    }

    @Provides
    @Singleton
    @Named("userData")
    public Cluster getClusterOne(NfAeneasManager aeneasManager) throws ConnectionException {
        // We initialize a cluster for our logical "userData" schema and we tell Aeneas to connect to the
        // "cass_sandbox" cluster.
        return aeneasManager.registerCluster("cass_sandbox");
    }

    @Provides
    @Singleton
    @Named("greetings")
    public Session getGreetingsSession(@Named("userData") Cluster cluster) {
        Session session = cluster.connect();
        // We add any code here that we might need to initialize keyspaces etc. for the cluster.
        // We make sure the operations are idempotent in case we partially initialize the service.
        // If your cluster initialization is more complicated you should use a CQL script outside the application code
        // and make that part of your administration process. Please reach out to the CDE team for help.
        String createKeyspaceStatementTemplate = "CREATE KEYSPACE IF NOT EXISTS %s WITH " +
                "replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }";
        String createKeyspaceStatement = String.format(createKeyspaceStatementTemplate,
                                                       "sunjeetsonboardingroot");
        session.execute(createKeyspaceStatement);
        return session;
    }

    @Override
    public boolean equals(Object obj) {
        return obj != null && getClass().equals(obj.getClass());
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
