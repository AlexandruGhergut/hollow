buildscript {
    final netflix_grpc_plugins_version = System.properties['netflix.grpc-plugins_netflix-grpc-plugins.version']
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'

        classpath "netflix.grpc-plugins:netflix-grpc-plugin-client:${netflix_grpc_plugins_version}"
        classpath "netflix.grpc-plugins:netflix-grpc-plugin-proto-definition:${netflix_grpc_plugins_version}"
        classpath "netflix.grpc-plugins:netflix-grpc-plugin-server-guice:${netflix_grpc_plugins_version}"
//        classpath 'netflix:nebula-lumen-dashboard-plugin:latest.release'
        classpath 'com.netflix.spring:nebula-ospackage-application-spring-boot-plugin:latest.release'
    }
}

allprojects {

    apply plugin: 'netflix.nebula'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.release'

    group = 'com.netflix.sunjeetsonboardingroot'

    apply plugin: 'war'
    apply plugin: 'nebula.facet'
    apply plugin: 'netflix.ospackage-tomcat'

    // apply plugin: 'netflix.findbugs'
    //apply plugin: 'netflix.lumen-dashboard'
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '8'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


repositories {
    if (project.hasProperty('useMavenLocal')) {
        repositories {
            println "Adding mavenLocal()"
            mavenLocal()
        }
        configurations.all {
            resolutionStrategy.cacheChangingModulesFor 0, 'hours'
        }
    }
}


// The ezconfig configuration kicks in when we build our debian package and deploy in AWS.
// It contains all the OS env variable configurations and anything else that tunes our boxes and
// tomcat server.
ospackage {
    requires('nflx-ezconfig')
}

// There is some clean up in our transitive dependencies that we need to do here.
configurations.all {
    exclude group: 'netflix', module: 'SRWrapper'
    exclude group: 'org.apache.ant', module: 'ant'
    exclude group: 'org.apache.cxf', module: 'cxf'
    exclude group: 'javax.servlet', module: 'servlet-api'
    exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    // Superceded by governator-api
    exclude group: 'com.netflix.governator', module: 'governator-annotations'
}

// We use the runtime dependency recommendation rules to resolve dependencies.
dependencyRecommendations {
    mavenBom module: "netflix.bom:runtime-platform-recommendations:latest.release"
}


dependencies {

    compile project(':sunjeets-onboarding-core')
    compile project(':sunjeets-onboarding-client')

    // Governator wires up all of our dependencies in dependency injection fashion.
    compile "com.netflix.governator:governator-core"
    compile "com.netflix.governator:governator-servlet"
    compile "com.netflix.governator:governator-jersey"

    // This is here because it's the only reliable way to make IDEs pick up the proper dependencies when running
    // a main() function while also not packaging the dependencies to be deployed on EC2.
    if (gradle.startParameter.taskRequests.isEmpty()) {
        compile("com.netflix.governator:governator-jetty") { transitive = false }
        compile "org.eclipse.jetty:jetty-servlet"
        compile "org.eclipse.jetty:jetty-webapp"
        compile "javax.servlet:javax.servlet-api"
    } else {
        providedCompile("com.netflix.governator:governator-jetty") { transitive = false }
        providedCompile "org.eclipse.jetty:jetty-servlet"
        providedCompile "org.eclipse.jetty:jetty-webapp"
        providedCompile "javax.servlet:javax.servlet-api"
    }

    // Runtime lifecycle modules bring in all the essential Netflix platform dependencies.
    compile "com.netflix.runtime:runtime-lifecycle"

    // Cassandra Aeneas driver
    compile "com.netflix.aeneas:aeneas-core"

    // Support for Swagger
    compile "com.netflix.runtime:runtime-swagger-lifecycle"

    testCompile 'junit:junit'
    testCompile 'org.mockito:mockito-core'
    testCompile 'org.assertj:assertj-core'
    testCompile 'com.netflix.governator:governator-test-junit'
    testCompile 'io.rest-assured:rest-assured:3.0.1'

    // Cassandra Aeneas unit test kit.
    testCompile "com.netflix.aeneas:aeneas-test"
}

// Print out full stack traces when our tests fail to assist debugging (e.g., when scanning Jenkins console output)
tasks.withType(Test) {
    testLogging {
        exceptionFormat = 'full'
    }
}

// Set up for the smoke test so we can execute ./gradlew smokeTest
facets {
    smokeTest {
        parentSourceSet = 'test'
    }
}
