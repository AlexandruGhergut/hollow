package com.netflix.vms.transformer.publish.workflow;

import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;

public class HollowBlobFileNamerTest {

    @Test
    public void testLargeNumOfTopNodes() {
        HollowBlobFileNamer namer = new HollowBlobFileNamer("myvip");

        String moviesStr = "80042368,80192445,80164353,80168227,80133549,80164362,80223363,80185164,80191361,80202095,80103818,80164357,80099016,80174703,70302946,70297452,80204555,80134941,80185161,80177553,80164360,80134966,70301279,80170235,80113614,80091658,80191404,80207385,80165418,80108759,80177340,80015672,70297450,80214516,1181634,80176207,80219984,80189623,80192928,80191354,80134827,80134755,80200349,70284442,80005444,80175085,80128715,80155475,80214543,80157088,80192835,80108616,80194737,70142451,80185223,80209608,70236560,80176112,80149259,80106743,80091741,80164355,80100906,80106966,70154599,70284445,80117453,80182409,80158577,80013282,80177754,80217434,80117746,70296885,80200346,80104068,80200697,80223944,80134968,80173142,70295494,80118930,80191508,80174220,80134781,80216729,80105690,80117263,70295491,70268449,80209059,70229100,80191510,80135707,80164077,70297453,70297469,80082242,80214458,80185321,80049273,70286212, \n" +
                "70235994,80222954,80064459,80015772,80117940,80158844,80005325,70290567,80223474,70154601,80175973,80185322,80158244,80117461,80175923,80164361,80164358,70284443,80174017,80031666,80183870,70299286,70177330,80031800,80118916,80177406,70217320,80179206,80210952,80117533,80191496,80097431,80170610,80171022,80117534,80108984,80223118,80133550,80216696,80190513,70229095,70276268,80175143,80178280,70301581,70297454,80003481,80115031,80018326,80168079,70299862,70298697,80164354,70304192,70259774,80176594,80063265,80106793,80068327,80115857,70275568,70264376,80097321,80200443,80057691,80124680,80004447,80018325,80101827,80189350,80124890,80134751,80097355,80004478,80139418,80203946,80127559,70280748,80047025,70295497,70287001,80200436,80151644,80134754,70075475,80081155,80134780,80191746,70302950,80200893,80224008,70284446,80116011,70283740,70305035,80169348,80067522,80217804,80100936,80041653,70254516,80115673, \n" +
                "70229099,80133553,80044093,80217670,80066073,80105067,80049871,80097472,80170230,80182115,80071348,80189897,80038296,80042184,80200694,80075476,80133554,70264372,60022989,80219337,60034505,80191512,80174365,80200906,70000266,80048940,80176114,80200690,80179249,80018136,80133663,80082862,80141788,80184834,60029409,80161753,80157885,80002621,80166532,80117747,80217574,80103734,80049873,80077402,80098200,80124728,80115464,80174254,80182209,80192095,70229098,80149064,80142058,80200897,80179433,80097003,70254515,80187310,70269551,80014748,80161029,80106307,70297449,60029270,80192532,80207000,80218641,70204286,80191509,80133551,80180185,80218859,70295492,80168188,80077923,80172921,80117443,80218081,80183329,80097424,80101493,80191665,80200348,80175288,80134969,80156943,80174991,80175979,80182025,80176109,80133552,80151483,80170112,70304298,80221718,70308278,80196586,80142100,80039717,80002667,70305999,70274389,\n" +
                "80175315,70297448,80122759,80117532,80142223,80191359,80127558,80205204,80113669,80119234,80117811,848396,80108371,80204560,80175971,70110031,80158589,80173224,80169801,80134527,80191177,80117454,70302947,80142316,80106979,80095197,80144803,80161109,80062064,80191511,80218956,70229094,80182545,80166257,70264377,80117080,70284444,80117628,80143541,80176108,80218282,70264388,70276228,80099089,80093198,80200345,80097725,80149021,80163156,80164181,80124725,80177555,80059410,80164359,70136810,80151370,80223723,80104461,80082789,80115466,80171659,80092885,80057578,80200699,80201001,80079258,80183435,80208273,80050006,80158831,80212109,70284440,80134967,80191360,80200314,80096955,80192171,80191362,80188830,70284439,80168230,80191926,70294669,80173793,80011848,80114666,80016219,70229096,80185159,70264391,80198854,80175970,80218648,80044545,80083594,80200299,80184055,80023921,80185156,80173777,80117484,80200692, \n" +
                "80200907,80081987,80176103,80196394,80158919,80191813,80118101,80038335,70296733,80114804,70295493,80150002,70295496,80100937,80158670,70225205,80097349,80171748,80015771,70295495,80134752,80091936,80168221,80191180,80009431,70284441,80164356,70297451";
        List<Integer> movieList = new ArrayList<>();
        for(String id : moviesStr.split(",")) {
            Integer i = Integer.parseInt(id.trim());
            movieList.add(i);
        }

        int[] topNodes = new int[movieList.size()];
        for (int i = 0; i < movieList.size(); i++) {
            topNodes[i] = movieList.get(0);
        }

        long version = 20171103172259176L;
        boolean includeFullPath = false;
        String filename = namer.getPinTitleFileName(version, includeFullPath, topNodes);
        System.out.printf("filename=%s len=%d\n", filename, filename.length());

        Assert.assertTrue(filename.length() < 150);
    }

    @Test
    public void testSmallNumOfTopNodes() {
        HollowBlobFileNamer namer = new HollowBlobFileNamer("myvip");

        String moviesStr = "80042368,80192445,80164353,80168227,80133549";
        List<Integer> movieList = new ArrayList<>();
        for (String id : moviesStr.split(",")) {
            Integer i = Integer.parseInt(id.trim());
            movieList.add(i);
        }

        int[] topNodes = new int[movieList.size()];
        for (int i = 0; i < movieList.size(); i++) {
            topNodes[i] = movieList.get(0);
        }

        long version = 20171103172259176L;
        boolean includeFullPath = false;
        String filename = namer.getPinTitleFileName(version, includeFullPath, topNodes);
        System.out.printf("filename=%s len=%d\n", filename, filename.length());

        Assert.assertTrue(filename.length() < 150);
    }

}
