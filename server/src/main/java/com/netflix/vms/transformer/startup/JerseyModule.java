package com.netflix.vms.transformer.startup;

import com.google.common.collect.Maps;
import com.netflix.runtime.health.servlet.HealthStatusServlet;
import com.netflix.server.base.NFFilter;
import com.sun.jersey.guice.JerseyServletModule;
import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;

import java.util.Map;

/**
 * We use this module to wire up our endpoints.
 *
 * @author This file is auto-generated by runtime@netflix.com. Feel free to modify.
 */
public final class JerseyModule extends JerseyServletModule {
    @Override
    protected void configureServlets() {
        // We need those filter parameters to enable request tracing for our service for in/outbound
        // requests.
        // NFFilter then intercepts them and adds tracing information to request/response headers.
        Map<String, String> initParams = Maps.newHashMap();
        initParams.put("requestId.accept", "true");
        initParams.put("requestId.require", "true");
        filter("/*").through(NFFilter.class, initParams);

        // This sets up Jersey to serve any found resources that start with the base path of "/REST/"
        serve("/REST/*").with(GuiceContainer.class);

        // Set up the healthcheck endpoint to be set by the provided status servlet.
        serve("/healthcheck").with(HealthStatusServlet.class);
    }

    @Override
    public boolean equals(Object obj) {
        return obj != null && getClass().equals(obj.getClass());
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
