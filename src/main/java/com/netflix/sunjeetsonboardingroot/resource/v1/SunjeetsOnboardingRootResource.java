package com.netflix.sunjeetsonboardingroot.resource.v1;

import com.netflix.sunjeetsonboardingroot.config.SunjeetsOnboardingRootConfig;
import com.netflix.sunjeetsonboardingroot.model.Greeting;
import com.netflix.sunjeetsonboardingroot.model.SunjeetsOnboardingRootDao;
import com.netflix.spectator.api.Counter;
import com.netflix.spectator.api.Registry;
import io.swagger.annotations.Api;
import io.swagger.annotations.Info;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.annotations.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.inject.Singleton;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

/**
 * This is our "Controller" portion of our Model-View-Controller pattern.
 * It is responsible for handling requests for getting and setting greetings
 * for a Netflix user.
 * <br>
 * To GET a Greeting try:
 * <br>
 * <br>
 * curl localhost:8080/REST/v1/hello/dwight@netflix.com
 * <br>
 * <br>
 * To POST a Greeting try:
 * <br>
 * <br>
 * curl -X POST -H "Content-Type: application/json"
 * --data '{"userEmail":"dwight@netflix.com","firstName":"Dwight","message":"Hey"}'
 * localhost:8080/REST/v1/hello
 * <br>
 * <br>
 * This is not the only way you can expose REST interfaces.
 * For more examples on how to use Jersey to configure your REST API, please check out the
 * Jersey User Guide.
 *
 * @author This file is auto-generated by runtime@netflix.com. Feel free to modify.
 */
@SwaggerDefinition(
        info = @Info(
                title="sunjeetsonboardingroot service",
                version="1.0",
                description = "sunjeetsonboardingroot service to get and set greetings for Netflix users."
        ),
        tags = {
            @Tag(name="greetings", description = "Greetings Operations"),
        },
        produces = {MediaType.APPLICATION_JSON},
        consumes = {MediaType.APPLICATION_JSON}
)
@Api("greetings")
@Singleton
@Path("v1/hello")
public final class SunjeetsOnboardingRootResource {
    private static final Logger logger = LoggerFactory.getLogger(SunjeetsOnboardingRootResource.class);

    private final Counter numTimesGreetingIsSetCounter;

    /** Where we keep our greetings for each user. */
    private final SunjeetsOnboardingRootDao sunjeetsOnboardingRootDao;

    /** Where we keep our configurations that we can dynamically access via the property getters. */
    private final SunjeetsOnboardingRootConfig config;

    @Inject
    public SunjeetsOnboardingRootResource(
            SunjeetsOnboardingRootDao sunjeetsOnboardingRootDao,
            SunjeetsOnboardingRootConfig config,
            Registry registry) {
        this.sunjeetsOnboardingRootDao = sunjeetsOnboardingRootDao;
        this.config = config;
        this.numTimesGreetingIsSetCounter = registry.counter("SunjeetsOnboardingRootResource.numTimesGreetingIsSet");
    }

    @Path("{user}")
    @GET
    @Produces({MediaType.APPLICATION_JSON})
    public Greeting getGreeting(@PathParam("user") String userEmail) {
        logger.debug("Got a request for a greeting for {}", userEmail);

        Greeting greeting = sunjeetsOnboardingRootDao.loadGreeting(userEmail).orElseGet( () -> {
            Greeting annonymousGreeting = new Greeting();
            annonymousGreeting.setUserEmail(userEmail);
            annonymousGreeting.setFirstName(config.getDefaultAnonymousName());
            annonymousGreeting.setMessage(config.getDefaultGreeting());
            return annonymousGreeting;
        });

        if (config.isLoudGreeting()) {
            greeting.setMessage(greeting.getMessage().toUpperCase());
        }
        return greeting;
    }

    @POST
    @Produces({MediaType.APPLICATION_JSON})
    @Consumes({MediaType.APPLICATION_JSON})
    public String setGreeting(Greeting greeting) {
        sunjeetsOnboardingRootDao.storeGreeting(greeting);
        numTimesGreetingIsSetCounter.increment();
        return "\"OK\"";
    }
}
