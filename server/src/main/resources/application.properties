## Standard logging configuration.
# By default CHUKWA is not enabled as an appender by default please enable it if you wish.
# Chukwa is our Data Pipeline logger that you can write to using the Keystone API (go/keystone).

log4j.rootCategory=INFO,CONSOLE

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout.ConversionPattern=%d %-5p %X{requestId} %C:%L [%t] [%M] %m%n
log4j.appender.CONSOLE.layout=com.netflix.logging.log4jAdapter.NFPatternLayout

log4j.appender.CHUKWA=com.netflix.chukwa.client.log4j.ChukwaLog4jStreamingAppender
log4j.appender.CHUKWA.layout.ConversionPattern=%d %-5p %C:%L [%t] [%M] %m%n
log4j.appender.CHUKWA.layout=com.netflix.logging.log4jAdapter.NFPatternLayout

log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.layout.ConversionPattern=%d %-5p %X{requestId} %C:%L [%t] [%M] %m%n
log4j.appender.FILE.layout=com.netflix.logging.log4jAdapter.NFPatternLayout

log4j.appender.CUSTOM_EVENTS=com.netflix.logging.CustomEventsMessageAppender
log4j.appender.CUSTOM_EVENTS.layout.ConversionPattern=%d %-5p %C:%L [%t] [%M] %m%n
log4j.appender.CUSTOM_EVENTS.layout=com.netflix.logging.log4jAdapter.NFPatternLayout

log4j.appender.REQUEST_BASED_LOGGING=com.netflix.logging.RequestLevelLoggingEventBusAppender
log4j.appender.REQUEST_BASED_LOGGING.layout.ConversionPattern=%d %-5p %C:%L [%t] [%M] %m%n
log4j.appender.REQUEST_BASED_LOGGING.layout=com.netflix.logging.log4jAdapter.NFPatternLayout

log4j.appender.FILE_DETAILED=org.apache.log4j.ConsoleAppender
log4j.appender.FILE_DETAILED.layout=com.netflix.logging.log4jAdapter.NFPatternLayout

## Quieting noisy 3rd party and legacy Netflix platform loggers by default.
log4j.logger.httpclient=WARN
log4j.logger.com.netflix.discovery=WARN
log4j.logger.com.netflix.config=WARN
log4j.logger.com.netflix.monitoring=WARN
log4j.logger.com.netflix.server.base.epic.RequestStats=OFF,CONSOLE
log4j.logger.com.netflix.server.base.RequestStats=WARN
log4j.logger.com.netflix.eventbus.impl=WARN
log4j.logger.com.netflix.atlas.plugin=WARN

## Our service logger configurations.
log4j.logger.com.netflix.vms.transformer=INFO

# Cassandra loggers
log4j.logger.com.datastax.driver=ERROR
log4j.logger.com.netflix.aeneas=ERROR

### Netflix Application configurations required for deployment.

# AWS environment: test or prod? The default if not set is "test".
# On deployment it's set to the "baked" NETFLIX_ENVIRONMENT env variable. Please don't modify.
netflix.environment=${NETFLIX_ENVIRONMENT}
# AWS region. We default if not set is "us-east-1" which is where we typically test.
# On deployment it's set to the "baked" EC2_REGION env variable. Please don't modify.
netflix.region=${EC2_REGION}
# The netflix stack your application is running in.  Default is no stack.
netflix.stack=${NETFLIX_STACK}
# The name of your service. This name will also match your Spinnaker generated deployment name.
# That's the name that you will be known in Discovery. If you modify it you will also need to
# modify your Spinnaker config.
netflix.appinfo.name=vmstransformer
# VIP address has been traditionally used as a lookup "rulebook" for a service that wants
# to discover another service. Below you are saying to anyone looking for your service:
# "You can find my instances first at the same stack you're deployed at
#  but if I'm not deployed there then look at the general service name under the environment".
# Typical stack names are "test", "dev", "staging". They are decided offline between service owners.
netflix.appinfo.vipAddress=${netflix.appinfo.name}${NETFLIX_STACK},${netflix.appinfo.name}

# HTTP port when deployed. Convention is to keep it to 7001.
# Please don't modify.
netflix.appinfo.port=7001
netflix.appinfo.securePort=7002

## Standard URLs that Discovery will add to your service metadata and make it easy to check up on
## deployed instances.
# Service home page. You can put anything you like there and rename the path.
netflix.appinfo.homePageUrlPath=/index.html
# URL to check if an instance is healthy. It is tied to your healthcheck indicators.
#The path is expected to be "/healthcheck".
# Please don't modify.
netflix.appinfo.healthCheckUrlPath=/healthcheck

## Jersey configurations
# Let's add our endpoints that are in the /REST path.
# disabled for now, but breaks Swagger; see go/jersey-security
#com.sun.jersey.config.property.packages=com.netflix.vms.transformer

### Our own service configuration

#(Check the TransformerConfig.java file for documentation).
vms.transformerVip=${NETFLIX_STACK}
vms.converterVip=${NETFLIX_DETAIL}

vms.netflixEnvironment=${NETFLIX_ENVIRONMENT}
vms.awsRegion=${EC2_REGION}
vms.awsInstanceId=${EC2_INSTANCE_ID}
vms.awsAmiId=${EC2_AMI_ID}


### Circuit Breaker Configurations

vms.circuitBreakerThreshold.CertificationSystemCheck=2.0
vms.circuitBreakerEnabled.TopNViewShare=false
vms.circuitBreakerEnabled.TopNViewShare.US=true
vms.circuitBreakerEnabled.TopNViewShare.AU=true
vms.circuitBreakerEnabled.TopNViewShare.BR=true
vms.circuitBreakerEnabled.TopNViewShare.CA=true
vms.circuitBreakerEnabled.TopNViewShare.DE=true
vms.circuitBreakerEnabled.TopNViewShare.GB=true
vms.circuitBreakerEnabled.TopNViewShare.NL=true
vms.circuitBreakerThreshold.TopNViewShare=0.33


### Cassandra Aeneas Cluster config.

# Properties must use a prefix that matches our cluster name in the CassandraModule.
# As you add more clusters you can have multiple sets of properties prefixed by the cluster name.
# Here is an example property that you can uncomment and try:
# cass_sandbox.aeneas.nativePort=7104
# For a full list of properties please visit: http://go/aeneas

#Playback Monkey REST Client Properties
vms-pbm-client.niws.client.AppName=playbackmonkey
vms-pbm-client.niws.client.Port=7001
vms-pbm-client.niws.client.DeploymentContextBasedVipAddresses=playbackmonkey-:7001
vms-pbm-client.niws.client.ReadTimeout=5000
vms-pbm-client.niws.client.ConnectTimeout=60000
vms-pbm-client.niws.client.GZipPayload=false
vms-pbm-client.niws.client.EnableZoneAffinity=false
vms-pbm-client.niws.client.EnableZoneExclusivity=false



