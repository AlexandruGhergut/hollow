allprojects {
    apply plugin: 'netflix.nebula'
    apply plugin: 'nebula.release'
}

dependencyRecommendations {
    mavenBom module: 'netflix.bom:runtime-platform-recommendations:latest.release'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'nebula.javadoc-jar'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'jacoco'
    apply plugin: 'netflix.findbugs'
    apply plugin: 'nebula.facet'
    apply plugin: 'checkstyle'
    checkstyle {
      configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
      toolVersion = 8.8
    }

    group = "com.netflix.vms.transformer"

    findbugs {
        ignoreFailures = true
    }

    dependencyLock {
        includeTransitives = true
    }

    configurations.all {
        resolutionStrategy {
            force 'com.google.inject.extensions:guice-servlet:latest.release'
            force 'org.apache.commons:commons-lang3:latest.release'
            force 'netflix.grpc:netflix-grpc-common:1.15.2' // ToDo: Can be dropped after 07/16/2019

            def platform_components = [
                'adminresources',
                'akmsclient',
                'base-explorer',
                'netflix-config',
                'nflibrary',
                'nflibrary-legacy-core',
                'nflibrary-junit-util',
                'server-context',
                'platform',
                'platform-aws',
                'platform-chukwaClient',
                'platform-core',
                'platform-ipc',
                'platform-logimpl',
                'platform-management',
                'platform-messaging',
                'platform-pool',
                'platform-sla',
                'platform-utils'
            ]
            def platform_desiredVersion = 'latest.release'  // or define the version you want
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'netflix' && platform_components.contains(details.requested.name)) {
                    details.useTarget group: details.requested.group, name: details.requested.name, version: platform_desiredVersion
                }
            }
        }
        
        exclude group: 'com.oracle'
        exclude group: 'org.apache.ant', module: 'ant'
        exclude group: 'org.apache.cxf', module: 'cxf'
    }

    ext {
        // calculate vmsHollowOutputPojosArgs and expose to vmstransformer-hollowoutput-api
        // and vmstransformer-hollowoutput-api-notemplate
        def vmsHollowOutputPojosDir = new File("${rootProject.projectDir}/vmstransformer-hollowoutput-model/src/main/java/com/netflix/vms/transformer/hollowoutput")
        def vmsHollowOutputPojosFiles = []
        vmsHollowOutputPojosDir.eachFile(groovy.io.FileType.FILES){file -> vmsHollowOutputPojosFiles << file}
        vmsHollowOutputPojosArgs = vmsHollowOutputPojosFiles.stream().map{f -> '--addToDataModel=com.netflix.vms.transformer.hollowoutput.' + f.getName().replace('.java', '')}.collect()
    }
}
